
usernameToken.X509.symmetric.binding={
This WS-SecurityPolicy template is best used if the client can use only a UsernameToken to authenticate itself, and if 
the message exchange must be signed and encrypted without using client's certificate. 

Basically, the client generates the Symmetric Key which is used to sign and encrypt the request . The symmetric key is
then encrypted with the public key of the server's certificate before sending the request along with encrypted symmetric 
key to the server. The server decrypts the received symmetric key with its own private key (only the private key can 
decrypt any message encrypted with its paired public key), and uses the symmetric key to decrypt  and verify the 
signature of the request.

It should become clear the advantage of using symmetric binding over asymmetric binding is that the server doesn't need
to import  the public key X509 certificate of all the clients using its web service into its keystore (which is
required for X509 asymmetric binding). Imagine the web service is going to be used by 100 clients then the server will
have to import and manage 100 public certificates from clients into its keystore!!

Note WS-SecurityPolicy can be used to specify which  parts of request/response message  to encrypt and sign in WSDL. 
By default, the message is signed first  before encrypted but this can be overriden to encrypt first before signing
using WS-SecurityPolicy.
}

usernameToken.X509.asymmetric.binding={
This WS-SecurityPolicy template is best used if the client must authenticate itself to the service with both an X509 
client certificate and a UsernameToken.

An X509 certificate has a pair of keys, public and private. The public key will be sent to any party that wants to 
communicate with you using X509 asymmetric binding BUT NEVER the private key (else game over).  Now for any message 
encrypted with the public key, only the private key can be used to decrypt it. And for any message signed with the 
private key, the same public key can be used to verify that the xml signature has indeed been signed by its paird 
private key. Confused? See below.

Basically the client will sign the message with its own private key then encrypts the message with server's public key 
before sending the request to the server. The server will decrypt the message with its own private key then verifies 
the xml signature of client  using the client's public key.

Response from server to client will use the same mechanism except the message will be signed with server's private key
and encrypted with client's public key. The client will decrypt the message with its own private key then verifies the
xml signature of server using the server's public key.

Note WS-SecurityPolicy can be used to specify which parts of request/response message  to encrypt and sign in WSDL. 
By default, the message is signed first before encrypted  but this can be overriden to encrypt first before signing 
using WS-SecurityPolicy.
}

X509.asymmetric.binding={
This policy template is best used if the client must authenticate itself to the service with only X509 client certificate and if the message exchange must be signed and encrypted.

Note this binding is exactly the same as UsernameToken with X509 asymmetric message protection except that UsernameToken won't be used for authentication in this case.
}

usernameToken.hash={
This WS-SecurityPolicy template will transmit the message in plain text but protects password by hashing password with SHA algorithm.

For production, this template is best used with SSL/TLS to protect message at transport layer.
}

symmetric.key.description={
In Symmetric-key algorithms, both parties(e.g. client and server) share the same secret key that can be used to do both
encryption and decryption. Messages communicated between the two parties will be encrypted using the secret key and
decrypted to plaintext for processing.
}

message.digest.description={
Message digest uses a one-way hash algorithm/function that takes an arbitrary block of data and returns a fixed-size bit
string, which can be used as a checksum or fingerprint to verify integrity of that arbitrary block of data (e.g.
downloaded file hasn't been corrupted).

These functions are also used for password verification where the database only stores the hash digest of password
concatenated with a random, unique salt value(e.g. user Id). The salt value used for each password will also be stored in
database. To authenticate a user, the password presented by the user is hashed using the stored salt and compared with
the stored hash so not even the server knows the real password of user.
}


