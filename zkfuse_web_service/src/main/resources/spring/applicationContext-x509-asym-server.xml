<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
   xmlns:jaxws="http://cxf.apache.org/jaxws"
   xsi:schemaLocation="
         http://www.springframework.org/schema/beans 
         http://www.springframework.org/schema/beans/spring-beans.xsd
         http://cxf.apache.org/jaxws
         http://cxf.apache.org/schemas/jaxws.xsd">

    <bean id="x509_asym_ServicePasswordCallback"
        class="org.zkfuse.webservice.service.x509.asym.ServiceKeystorePasswordCallback" />

    <jaxws:endpoint 
        id="x509_asymmetric_doubleit"
        implementor="org.zkfuse.webservice.service.x509.asym.DoubleItPortTypeImpl"
        address="/x509_asymmetric/doubleit"
        wsdlLocation="x509_asym_webservice/DoubleIt.wsdl">
 
        <!-- Comment below element to use non-WS-SecPol CXF interceptor method -->
        <jaxws:properties>
            <entry key="ws-security.callback-handler">
                <!-- this call back contains passwords for both private key & username token. Production should
                    use one callback for each scenario -->
                <ref bean="x509_asym_ServicePasswordCallback"/>
            </entry>

            <entry key="ws-security.encryption.properties" value="un_x509_asym_webservice/serviceKeystore.properties"/>
            <entry key="ws-security.signature.properties" value="un_x509_asym_webservice/serviceKeystore.properties"/>
            <entry key="ws-security.encryption.username" value="useReqSigCert"/>
        </jaxws:properties> 

        <!-- Uncomment below interceptors to use CXF interceptor method -->
        <!--jaxws:outInterceptors>
            <ref bean="TimestampSignEncrypt_Response"/>
        </jaxws:outInterceptors>
        <jaxws:inInterceptors>
            <ref bean="TimestampSignEncrypt_Request"/>
            <bean class="org.apache.cxf.ws.security.wss4j.DefaultCryptoCoverageChecker"/>
        </jaxws:inInterceptors-->
    </jaxws:endpoint>

    <!--    
        This bean is needed only if you're using the CXF interceptor method (per above 
        configuration, it's ignored if you're using the WS-SecurityPolicy method.)

        WSS4JInInterceptor for decrypting and validating the signature of the
        SOAP request.
    -->
    <!--bean 
        id="TimestampSignEncrypt_Request"
        class="org.apache.cxf.ws.security.wss4j.WSS4JInInterceptor"
        >
        <constructor-arg>
            <map>
                <entry key="action" value="Timestamp Signature Encrypt"/>
                <entry key="signaturePropFile" value="serviceKeystore.properties"/>
                <entry key="decryptionPropFile" value="serviceKeystore.properties"/>
                <entry key="passwordCallbackClass" value="service.ServiceKeystorePasswordCallback"/>
                <entry key="encryptionKeyTransportAlgorithm" value="http://www.w3.org/2001/04/xmlenc#rsa-oaep-mgf1p"/>
                <entry key="signatureAlgorithm" value="http://www.w3.org/2000/09/xmldsig#rsa-sha1"/>
            </map>
        </constructor-arg>
    </bean-->
    
    <!--    
        This bean is needed only if you're using the CXF interceptor method (per above 
        configuration, it's ignored if you're using the WS-SecurityPolicy method.)

        WSS4JOutInterceptor for encoding and signing the SOAP response.    
    -->
    <!--bean 
        id="TimestampSignEncrypt_Response"
        class="org.apache.cxf.ws.security.wss4j.WSS4JOutInterceptor"
        >
        <constructor-arg>
            <map>
                <entry key="action" value="Timestamp Signature Encrypt"/>
                <entry key="user" value="myservicekey"/>
                <entry key="signaturePropFile" value="serviceKeystore.properties"/>
                <entry key="encryptionPropFile" value="serviceKeystore.properties"/>
                <entry key="encryptionUser" value="useReqSigCert"/>
                <entry key="passwordCallbackClass" value="service.ServiceKeystorePasswordCallback"/>
                <entry key="signatureParts" value="{Element}{http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd}Timestamp;{Element}{http://schemas.xmlsoap.org/soap/envelope/}Body"/>
                <entry key="encryptionParts" value="{Element}{http://www.w3.org/2000/09/xmldsig#}Signature;{Content}{http://schemas.xmlsoap.org/soap/envelope/}Body"/>
                <entry key="encryptionSymAlgorithm" value="http://www.w3.org/2001/04/xmlenc#tripledes-cbc"/>
                <entry key="encryptionKeyTransportAlgorithm" value="http://www.w3.org/2001/04/xmlenc#rsa-oaep-mgf1p"/>
                <entry key="signatureAlgorithm" value="http://www.w3.org/2000/09/xmldsig#rsa-sha1"/>
            </map>
        </constructor-arg>
    </bean-->   

</beans>

